max_seq_len: 4096
global_seed: 17
model_name: meta-llama/Llama-2-7b-hf

# Run Name
run_name: composer-llama-2-7b-fine-tune

# Model
model:
  name: hf_causal_lm
  init_device: mixed
  pretrained_model_name_or_path: ${model_name}
  pretrained: true
  # It's important to set this in order for composer to use the token logged with notebook_login()
  use_auth_token: true
  
# Tokenizer
tokenizer:
  name: ${model_name}
  kwargs:
    model_max_length: ${max_seq_len}

# Dataloaders
train_loader:
  name: finetuning
  dataset:
    hf_name: mosaicml/dolly_hhrlhf
    split: train
    max_seq_len: ${max_seq_len}
    allow_pad_trimming: false
    decoder_only_format: true
    shuffle: true
  drop_last: true
  num_workers: 4
  pin_memory: false
  prefetch_factor: 2
  persistent_workers: true
  timeout: 0

eval_loader:
  name: finetuning
  dataset:
    hf_name: mosaicml/dolly_hhrlhf
    split: test
    max_seq_len: ${max_seq_len}
    allow_pad_trimming: false
    decoder_only_format: true
    shuffle: false
  drop_last: true
  num_workers: 4
  pin_memory: false
  prefetch_factor: 2
  persistent_workers: true
  timeout: 0

# Optimization
scheduler:
  name: cosine_with_warmup
  t_warmup: 100ba
  alpha_f: 0.1

optimizer:
  name: decoupled_lionw
  lr: 5.0e-7
  betas:
  - 0.9
  - 0.95
  weight_decay: 0.0

algorithms:
  gradient_clipping:
    clipping_type: norm
    clipping_threshold: 1.0

max_duration: 1ep
eval_interval: 1
eval_first: false
eval_subset_num_batches: -1
global_train_batch_size: 8

# System
seed: ${global_seed}
device_eval_batch_size: 8
device_train_microbatch_size: auto
precision: amp_bf16

# FSDP
fsdp_config:
  sharding_strategy: FULL_SHARD
  mixed_precision: PURE
  activation_checkpointing: true
  activation_checkpointing_reentrant: false
  activation_cpu_offload: false
  limit_all_gathers: true
  verbose: false

# Logging
progress_bar: false
log_to_console: true
console_log_interval: 1ba

callbacks:
  speed_monitor:
    window_size: 10
  lr_monitor: {}
  memory_monitor: {}
  runtime_estimator: {}

# loggers:
#   wandb: {}

# Checkpoint to local filesystem or remote object store
save_interval: 50ba # Save a checkpoint every 50 batches
save_num_checkpoints_to_keep: 1  # Important, this cleans up checkpoints saved to DISK
save_folder: /local_disk0/{run_name}/checkpoints # Save to the local elastic disk of the Databricks cluster driver node
# save_folder: s3://my-bucket/my-folder/{run_name}/checkpoints

# Load from local filesystem or remote object store
# load_path: /local_disk0/{run_name}/checkpoints/latest-rank{rank}.pt
# load_path: s3://my-bucket/my-folder/{run_name}/checkpoints/latest-rank{rank}.pt